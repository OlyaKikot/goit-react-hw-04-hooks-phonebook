{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","App.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","props","useState","name","setName","number","setNumber","className","s","form","onSubmit","event","preventDefault","onFormSubmit","input","type","onChange","currentTarget","value","pattern","title","required","button","Filter","text","filter","changeFilter","ContactListItem","contact","onDelete","container","item","id","onClick","target","ContactList","contacts","list","map","App","setContacts","setFilter","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","mainTitle","some","alert","prevContacts","nanoid","e","toLowerCase","includes","trim","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da9e2b0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__21Ghq\",\"name\":\"ContactForm_name__1y3rq\",\"input\":\"ContactForm_input__jzQ9G\",\"button\":\"ContactForm_button__1zkPa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactListItem_button__3_nJQ\",\"container\":\"ContactListItem_container__2wBRZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Filter_text__1T5IP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainTitle\":\"App_mainTitle__ltbZ0\",\"title\":\"App_title__1rvVI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__29Ufb\"};","import { useState } from \"react\";\nimport s from \"../ContactForm/ContactForm.module.css\";\n\nexport default function ContactForm(props) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const onChange = (event) => {\n    setName(event.currentTarget.value);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.onFormSubmit(name, number);\n    setName(\"\");\n    setNumber(\"\");\n  };\n  const onChangeNumber = (event) => {\n    setNumber(event.currentTarget.value);\n  };\n  return (\n    <>\n      <form className={s.form} onSubmit={onSubmit}>\n        <p className={s.name}>Name</p>\n        <input\n          className={s.input}\n          type=\"text\"\n          onChange={onChange}\n          value={name}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n        <p className={s.name}>Number</p>\n        <input\n          className={s.input}\n          type=\"tel\"\n          onChange={onChangeNumber}\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n\n        <button className={s.button} type=\"onSubmit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\n","import PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\n\nexport default function Filter(props) {\n  return (\n    <>\n      <p className={s.text}>Find contacts by name</p>\n      <input\n        className={s.input}\n        type=\"text\"\n        value={props.filter}\n        onChange={props.changeFilter}\n      ></input>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport s from \"../ContactListItem/ContactListItem.module.css\";\nexport default function ContactListItem({ contact, onDelete }) {\n  return (\n    <div className={s.container}>\n      <li className={s.item}>\n        {contact.name}: {contact.number}\n      </li>\n      <button\n        className={s.button}\n        id={contact.id}\n        type=\"button\"\n        onClick={(event) => onDelete(event.target.id)}\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nContactListItem.propTypes = {\n  contact: PropTypes.exact({\n    name: PropTypes.string,\n    number: PropTypes.string,\n    id: PropTypes.string,\n  }).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport ContactListItem from \"./ContactListItem\";\nimport s from \"./ContactList.module.css\";\n\nexport default function ContactList({ contacts, onDelete }) {\n  return (\n    <>\n      <ul className={s.list}>\n        {contacts.map((contact) => (\n          <ContactListItem\n            contact={contact}\n            onDelete={onDelete}\n            key={contact.id}\n          />\n        ))}\n      </ul>\n    </>\n  );\n}\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport ContactForm from \"./components/ContactForm/\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\nimport s from \"./App.module.css\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([\n    { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n    { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n  ]);\n  const [filter, setFilter] = useState(\"\");\n\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const visibleContacts = () =>\n    contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n    );\n  const onFormSubmit = (name, number) => {\n    if (contacts.some((contact) => contact.name === name)) {\n      alert(name + \" is already in contacts\");\n      return;\n    }\n    setContacts((prevContacts) => [\n      ...prevContacts,\n      { name, number, id: nanoid() },\n    ]);\n  };\n  const onDelete = (id) => {\n    setContacts(contacts.filter((contact) => contact.id !== id));\n  };\n\n  useEffect(() => {\n    const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n    setContacts(parsedContacts);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <>\n      <h1 className={s.mainTitle}>Phonebook</h1>\n      <ContactForm onFormSubmit={onFormSubmit} />\n      <Filter filter={filter} changeFilter={changeFilter} />\n      <h2 className={s.title}>Contacts</h2>\n      <ContactList contacts={visibleContacts()} onDelete={onDelete} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}